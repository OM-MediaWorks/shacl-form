var __defProp=Object.defineProperty;var __defNormalProp=(obj,key,value)=>key in obj?__defProp(obj,key,{enumerable:!0,configurable:!0,writable:!0,value}):obj[key]=value;var __name=(target,value)=>__defProp(target,"name",{value,configurable:!0});var __publicField=(obj,key,value)=>(__defNormalProp(obj,typeof key!="symbol"?key+"":key,value),value);import{d as defaultEnv,n as createRoot,f as reactExports,F as FormLevelBase,a as sh,r as rdfs,b as bestLanguage,u as parsePath,v as render,w as iso31661,x as xsd}from"./index-65ce004c.js";import{h as html}from"./async-fea5cafe.js";const _ShaclFormMultiEditor=class _ShaclFormMultiEditor extends HTMLElement{constructor(){super(...arguments);__publicField(this,"path");__publicField(this,"predicate",defaultEnv.namedNode(""));__publicField(this,"index",0);__publicField(this,"shaclPointer",{});__publicField(this,"dataPointer",__name(()=>({}),"dataPointer"));__publicField(this,"df",defaultEnv);__publicField(this,"uiLanguagePriorities",[]);__publicField(this,"fields");__publicField(this,"isHeader",!1);__publicField(this,"isFooter",!1);__publicField(this,"reactRoot");__publicField(this,"combinedFields");__publicField(this,"mapping",{})}get value(){return this.dataPointer().terms[this.index]}static createNewObject(){return defaultEnv.blankNode()}async connectedCallback(){this.combinedFields=document.createElement("div"),this.reactRoot=createRoot(this.combinedFields);const form=this.closest(".shacl-form");this.reactRoot.render(reactExports.createElement(FormLevelBase,{tree:this.fields,uiLanguagePriorities:form.uiLanguagePriorities,shaclPointer:this.shaclPointer,dataPointer:this.dataPointer(),form,ignoreGroups:!0})),this.render()}renderAll(){this.form.render()}get form(){return this.closest(".shacl-form")}render(){}header(){return null}template(){return null}footer(){return null}static score(){return 100}setValues(values){for(const[key,mappedPredicate]of Object.entries(this.mapping)){const newValue=values[key],oldValue=this.dataPointer().out([mappedPredicate]).term;this.dataPointer().deleteOut(mappedPredicate,oldValue),newValue&&this.dataPointer().addOut(mappedPredicate,newValue);const event=new CustomEvent("value.set",{detail:{predicate:this.predicate,object:newValue,dataPointer:this.dataPointer(),shaclPointer:this.shaclPointer,element:this}});this.form.dispatchEvent(event)}this.renderAll()}getValues(){const values={};for(const[key,mappedPredicate]of Object.entries(this.mapping)){const value=this.dataPointer().out([mappedPredicate]).term;value&&(values[key]=value)}return values}getValuesWithLabels(){const labels=new Map;for(const shaclProperty of this.shaclPointer.out([sh("property")])){const names=shaclProperty.out([sh("name"),rdfs("label")]),label=bestLanguage(names,this.uiLanguagePriorities),path=parsePath(shaclProperty.out([sh("path")]));for(const predicate of path.pop().predicates)labels.set(predicate.value,label)}const values=[];for(const[key,mappedPredicate]of Object.entries(this.mapping)){const value=this.dataPointer().out([mappedPredicate]).term,label=labels.get(mappedPredicate.value);value&&value.value&&label&&values.push({label,value,key,predicate:mappedPredicate})}return values}};__name(_ShaclFormMultiEditor,"ShaclFormMultiEditor"),__publicField(_ShaclFormMultiEditor,"type","multi");let ShaclFormMultiEditor=_ShaclFormMultiEditor;const _ShaclFormMultiEditorUhtml=class _ShaclFormMultiEditorUhtml extends ShaclFormMultiEditor{async render(){this.isHeader?render(this,await this.header()):this.isFooter?render(this,await this.footer()):render(this,await this.template())}};__name(_ShaclFormMultiEditorUhtml,"ShaclFormMultiEditorUhtml");let ShaclFormMultiEditorUhtml=_ShaclFormMultiEditorUhtml;const _Address=class _Address extends ShaclFormMultiEditorUhtml{constructor(){super(...arguments);__publicField(this,"showAdvanced",!1)}template(){const labelsAndValues=this.getValuesWithLabels();return html`
      ${this.showAdvanced?this.combinedFields:html`
        <p>
          ${labelsAndValues.map(({label,value,key})=>{let valueText=value.value;if(key==="country"){const valueTextReplacement=iso31661.find(item=>valueText.length===2?item.alpha2===valueText:item.alpha3===valueText);valueTextReplacement&&(valueText=valueTextReplacement.name)}return html`<label>${label}</label>: ${valueText}<br />`})}
        </p>

        <input type="search" placeholder="Search" onChange=${async event=>{const results=await this.form.options.plugins.geocoder.search(event.target.value);if(results){const street=`${results.street??""} ${results.number??""}`.trim(),postalCode=results.postalCode?typeof results.postalCode=="number"||parseInt(results.postalCode).toString()===results.postalCode?defaultEnv.literal(results.postalCode,xsd("number")):defaultEnv.literal(results.postalCode):void 0;this.setValues({street:street?defaultEnv.literal(street):void 0,postalCode:postalCode||void 0,locality:results.locality?defaultEnv.literal(results.locality):void 0,region:results.region?defaultEnv.literal(results.region):void 0,country:results.country?defaultEnv.literal(results.country):void 0,latitude:results.latitude?defaultEnv.literal(results.latitude.toString(),xsd("double")):void 0,longitude:results.longitude?defaultEnv.literal(results.longitude.toString(),xsd("double")):void 0})}}} />      
      `}

      <br />

      <button class="btn btn-secondary btn-sm" onClick=${()=>{this.showAdvanced=!this.showAdvanced,this.render()}}>${this.showAdvanced?"Hide advanced":"Show advanced"}</button>

    `}};__name(_Address,"Address");let Address=_Address;export{Address as default};
